library Project1;

{ Important note about DLL memory management: ShareMem must be the
  first unit in your library's USES clause AND your project's (select
  Project-View Source) USES clause if your DLL exports any procedures or
  functions that pass strings as parameters or function results. This
  applies to all strings passed to and from your DLL--even those that
  are nested in records and classes. ShareMem is the interface unit to
  the BORLNDMM.DLL shared memory manager, which must be deployed along
  with your DLL. To avoid using BORLNDMM.DLL, pass string information
  using PChar or ShortString parameters. }

uses
  System.SysUtils,
  System.Classes;

{$R *.res}

type
  massiv = array of integer;
  BmassivB = array of byte;
  Pmassiv = ^massiv;
  PPmassiv = ^BmassivB;
// ----------------------------------------------------------------------------//

// СОРТИРОВКА ПУЗЫРЬКОМ
// ----------------------------------------------------------------------------//
procedure sort1(memory: Pmassiv; n:integer); stdcall;
var
  i,p,j:integer;
begin
  for i := 1 to n do
    for j := 1 to n - i do
      if memory^[j] > memory^[j + 1] then
        begin { Обмен элементов }
          p := memory^[j];
          memory^[j] := memory^[j + 1];
          memory^[j + 1] := p;
        end;
end;
// ----------------------------------------------------------------------------//

// СОРТИРОВКА МЕТОДОМ ПРОСТЫХ ВСТАВОК
// ----------------------------------------------------------------------------//
procedure sort2(memoryA,memoryB: Pmassiv; n:integer); stdcall;
var
  i,p,j:integer;
begin
  for i := 1 to n do
  begin
    j := i;
    while (j > 1) and (memoryB^[j - 1] > memoryA^[i]) do
      begin
        memoryB^[j] := memoryB^[j - 1];
        j := j - 1;
      end;
      memoryB^[j] := memoryA^[i];
  end;
end;
// ----------------------------------------------------------------------------//

// БЫСТРАЯ СОРТИРОВКА
// ----------------------------------------------------------------------------//
procedure quicksort(var mas: massiv; first, last: integer);
var
  f, l, mid, count: integer;
begin
  f := first;
  l := last;
  mid := mas[(f + l) div 2]; { вычисление опорного элемента }
  repeat
    while mas[f] < mid do
      inc(f);
    while mas[l] > mid do
      dec(l);
    if f <= l then { перестановка элементов }
    begin
      count := mas[f];
      mas[f] := mas[l];
      mas[l] := count;
      inc(f);
      dec(l);
    end;
  until f > l;
  if first < l then
    quicksort(mas, first, l);
  if f < last then
    quicksort(mas, f, last);
end;

procedure sort4(memory: Pmassiv; first, last: integer);
begin
  quicksort(memory^,1,last);
end;
// ----------------------------------------------------------------------------//

// СОРТИРОВКА ПОДСЧЕТОМ
// ----------------------------------------------------------------------------//
procedure sort5(memoryA,memoryB: PPmassiv; n:integer); stdcall;
var
  C: massiv;
  i: integer;
begin
  { Сортировка данных }
  SetLength(C,255);
  for i := 0 to 255 do
    C[i] := 0;
  for i := 1 to n do
    C[memoryA^[i]] := C[memoryA^[i]] + 1;
  for i := 1 to 255 do
    C[i] := C[i - 1] + C[i];
  for i := n downto 1 do
    begin
      memoryB^[C[memoryA^[i]]] := memoryA^[i];
      C[memoryA^[i]] := C[memoryA^[i]]-1;
      { здесь мы избегаем возможности записи двух одинаковых чисел в одну ячейку }
    end;
end;
// ----------------------------------------------------------------------------//

// ----------------------------------------------------------------------------//
Exports sort1, sort2, sort4, sort5;
// ----------------------------------------------------------------------------//

begin
end.
